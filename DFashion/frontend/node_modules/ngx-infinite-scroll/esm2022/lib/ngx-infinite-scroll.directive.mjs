import { Directive, EventEmitter, Input, Output, } from '@angular/core';
import { hasWindowDefined, inputPropChanged } from './services/ngx-ins-utils';
import { createScroller, InfiniteScrollActions, } from './services/scroll-register';
import * as i0 from "@angular/core";
export class InfiniteScrollDirective {
    constructor(element, zone) {
        this.element = element;
        this.zone = zone;
        this.scrolled = new EventEmitter();
        this.scrolledUp = new EventEmitter();
        this.infiniteScrollDistance = 2;
        this.infiniteScrollUpDistance = 1.5;
        this.infiniteScrollThrottle = 150;
        this.infiniteScrollDisabled = false;
        this.infiniteScrollContainer = null;
        this.scrollWindow = true;
        this.immediateCheck = false;
        this.horizontal = false;
        this.alwaysCallback = false;
        this.fromRoot = false;
    }
    ngAfterViewInit() {
        if (!this.infiniteScrollDisabled) {
            this.setup();
        }
    }
    ngOnChanges({ infiniteScrollContainer, infiniteScrollDisabled, infiniteScrollDistance, }) {
        const containerChanged = inputPropChanged(infiniteScrollContainer);
        const disabledChanged = inputPropChanged(infiniteScrollDisabled);
        const distanceChanged = inputPropChanged(infiniteScrollDistance);
        const shouldSetup = (!disabledChanged && !this.infiniteScrollDisabled) ||
            (disabledChanged && !infiniteScrollDisabled.currentValue) ||
            distanceChanged;
        if (containerChanged || disabledChanged || distanceChanged) {
            this.destroyScroller();
            if (shouldSetup) {
                this.setup();
            }
        }
    }
    ngOnDestroy() {
        this.destroyScroller();
    }
    setup() {
        if (!hasWindowDefined()) {
            return;
        }
        this.zone.runOutsideAngular(() => {
            this.disposeScroller = createScroller({
                fromRoot: this.fromRoot,
                alwaysCallback: this.alwaysCallback,
                disable: this.infiniteScrollDisabled,
                downDistance: this.infiniteScrollDistance,
                element: this.element,
                horizontal: this.horizontal,
                scrollContainer: this.infiniteScrollContainer,
                scrollWindow: this.scrollWindow,
                throttle: this.infiniteScrollThrottle,
                upDistance: this.infiniteScrollUpDistance,
            }).subscribe((payload) => this.handleOnScroll(payload));
        });
    }
    handleOnScroll({ type, payload }) {
        const emitter = type === InfiniteScrollActions.DOWN ? this.scrolled : this.scrolledUp;
        if (hasObservers(emitter)) {
            this.zone.run(() => emitter.emit(payload));
        }
    }
    destroyScroller() {
        if (this.disposeScroller) {
            this.disposeScroller.unsubscribe();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: InfiniteScrollDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.0.2", type: InfiniteScrollDirective, isStandalone: true, selector: "[infiniteScroll], [infinite-scroll], [data-infinite-scroll]", inputs: { infiniteScrollDistance: "infiniteScrollDistance", infiniteScrollUpDistance: "infiniteScrollUpDistance", infiniteScrollThrottle: "infiniteScrollThrottle", infiniteScrollDisabled: "infiniteScrollDisabled", infiniteScrollContainer: "infiniteScrollContainer", scrollWindow: "scrollWindow", immediateCheck: "immediateCheck", horizontal: "horizontal", alwaysCallback: "alwaysCallback", fromRoot: "fromRoot" }, outputs: { scrolled: "scrolled", scrolledUp: "scrolledUp" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: InfiniteScrollDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[infiniteScroll], [infinite-scroll], [data-infinite-scroll]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.NgZone }], propDecorators: { scrolled: [{
                type: Output
            }], scrolledUp: [{
                type: Output
            }], infiniteScrollDistance: [{
                type: Input
            }], infiniteScrollUpDistance: [{
                type: Input
            }], infiniteScrollThrottle: [{
                type: Input
            }], infiniteScrollDisabled: [{
                type: Input
            }], infiniteScrollContainer: [{
                type: Input
            }], scrollWindow: [{
                type: Input
            }], immediateCheck: [{
                type: Input
            }], horizontal: [{
                type: Input
            }], alwaysCallback: [{
                type: Input
            }], fromRoot: [{
                type: Input
            }] } });
function hasObservers(emitter) {
    // Note: The `observed` property is available only in RxJS@7.2.0, which means it's
    // not available for users running the lower version.
    return emitter.observed ?? emitter.observers.length > 0;
}
//# sourceMappingURL=data:application/json;base64,